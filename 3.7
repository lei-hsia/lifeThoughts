TODO: 76, 233, reorganize string

首先继续hashtable;
409. Longest Palindrome: 出现的是奇数次数拿出其中的最大偶数的高效思想: 跟出现的是偶数一样直接加, 然后“减一”:
        减一，因为出现的是奇数次，那么其中的最大偶数次数就是奇数次数减一; 此时因为并没有对string作全部通用化的
        处理, 所以要分有没有中间: bool mid=false; 加到res中是直接遍历map加的所以效率高
        ### 注意map用迭代器的遍历方式: map是可以遍历的;
        
447. #Boomerangs: 
    ⚠️注意:  1. map应该记录的是相同的距离映射出现的次数, 点集只是载体并没有什么用
            2. "相同距离": 所以map应该是每一个base点对应一个map,这个map是其他所有点到这个点的距离;
            3. 如果map定义为全局, 那么这样的距离并没有什么用; 因为相当于是很多点混合之后的距离
       map是在每个点for循环中局部定义的; res是遍历每个点累加定义在外部的

463. Island Perimeter:  我的思路: bfs判断当前1有多少个相邻1; map映射cell-->相邻1的个数, res+=4N再减去每个cell相邻的;
     但是bfs不会写😢: 复习200: #Islands; 
     实际上用不着bfs: 直接遍历整个grid就行了; res+=4N; 然后后处理: 如果当前的cell 👈左边/👆上面有格子,直接-2,因为两条边都成了内部;
     用不着单独bfs函数
🆗🆗🆗🐒: 
200. #Islands: DFS
      标准的用dfs找图中联通的区域: 本质是找矩阵中连续区域的个数; 
      ⚠️注意：需要用一个伴随矩阵visited记录1是否被访问过；
      1. 对于一个1而且没有被访问过，递归进入这个1上下左右的1并把visited赋值为true然后再递归进入上下左右位置，这样能把这个相联通的整个区域都找出来
      2. 这个联通区域找完了, 那么再遍历下一个没有被访问过的1并找出整个联通区域... 直到grid被访问完, 结束
    通过Grandyang的写法能够看出，主函数中就只是遍历, dfs是封装在另一个函数中写的 (dfs函数访问的时候，只要访问过就把visited设置为true)
    
500. Keyboard Row: 三个行对应三个set(不用map因为只需要看有没有不用知道有多少次),遍历每个单词字母看在哪个set 用一个累计变量统计最后次数
     每个找到了之后分别用
⚠️⚠️🐷🐖: 
350. Intersection of 2 Arrays II:
     1). 看if(m[a]-- >0): 改了几个test case发现 if(m[a]-- >0) 就是先减减再判断
     2). 然后我就理解了, 实际上加到res中的是[1, 1]的第二个1 ； 
         e.g. [ ]作为nums1那么map为空, 然后[1, 1]进来判断, m[1]==0是成立的不进入if, 
         然后m[1]--变为-1; 那么第二个1来判断就进入if了所以也加入到了res;
         
(sliding window: 绝世好题): 也要复习一下Permutation/Combination
567. Permutation in String: Grandyang的两个哈希表的思路: 因为只是判断出现的字母总体是否相同,并不关注顺序,
                所以用哈希表记录s1，和s2中相同长度的字母: 相同就直接返回true, 不同就滑动窗口s2右移
                
594. Longest Harmonious Subsequence: 寻找两个相邻的数,两个频数加起来最大: 
     👌最佳: 其实可以根据一个数是多少, +1操作用count()看大一个的数在不在map中, 遍历更新res <--最简单的方法
       不用看－1在不在map中: 因为遍历到小的数就还是+1
       
451.  Sort Characters by Frequency: 思路是哈希表记录次数; 但是实际上用不着哈希表, 因为用vector:把每个
        相同的char连出现的次数个放在index为次数的vector就行了, i.e.这个vector按下标存一个string, 这个
        string就是下标个char连成的string;这样各个char组成的string就已经从后往前按频率排序了, 连起来就行了
     API: std::string::append(size n, char c): vector的元素是string所以用append方法;
     vector初始化size是s.size()+1, 是因为要按照(下标==出现的频率)存string, 所以是s.size()+1
     
   实际上, 因为是按频率sort的问题==> 更好的方法: 1) pq; 2) 重写sort
       
