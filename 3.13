昨天finish了 sudokuSolver(dfs), 还应该复习MineSweeper(bfs);
TODO: LRU, LFU, skyline(sweep line), meeting room;

146. LRU Cache: 
     A. map: O(1)时间内查询:用一个哈希表m: 记录key-->元素的迭代器 的映射;
     B. list: make_pair(key, value): 因为元素并不是按顺序的而是LRU的顺序, 所以如果list只存了
        真正要取的元素, 那么要用list的下标而且元素位置的改变是没有规律的:==> 不行,存的时候必须带上key
     C. 因为存到容器list中的是kv对, 所以最好存迭代器这样之后取元素好取一些
  总之就是, 因为查询时间要求是O(1)那么要么用map映射然后存的时候存到另一个容器中要么用vector/list/deque直接任意位置下标查;
      (再次复习STL:中的list的实现实际上是链表实现的; deque是双端队列;)
   但是因为要求 put()也是 O(1)时间完成的; 用vector是不能达到这个目的的(O(n)); vector❌;
   deque: 可以靠index任意位置O(1)时间获取, 但是insert要O(1)时间就只能在队列首位两端,任意位置不行;
   
   ✅:实际上要任意位置插入时间要求是 O(1)就只能从list/forward_list考虑: 因为只有链表支持任意位置的O(1)时间插入;
      但是要怎么实现查找也是任意时间?链表按顺序查找对应的查找时间是O(n): 所以要额外用一个哈希表记录 (key-->这个元素)的kv对;
    另外, 因为链表中要实现LRU的功能:这意味着最recent的移动到最前面:实际上就没有什么固定的顺序:
    如果map的size要大于当前的cap了，要移除最下面的元素: 找到对应的key: 因为k-v都要用: 存到map的被映射部分和list中的都是迭代器,
    迭代器指向的是make_pair(key, value)这个pair
  std::list::splice(iterator pos, list& x, iterator i): 把迭代器i指向的元素放到list x的pos位置
  std::make_pair(T1 x, T2 y)
  std::map::erase(key/iter pos)
  原来存在这个pair就删掉之前的pair然后在顶部插入当前的项，如果没有找到就直接插入
  unordered_map<int, list<pair<int, int>>::iterator> m; 后面的类型是: 存pair的list类型的迭代器
  删掉元素: list是 std::list::erase(元素);  map是 std::map::erase(key);

460. LFU Cache:
    LRU: Recently: 总是在list最前面插入元素所以最后一位总是least recently;
    LFU: Frequent: 1. 因为要记录每个数据的freq, 还需要一个map记录数据和freq的pair;
                   2. 同一个freq可能有很多数据: 用一个map建立freq和所有这个频率的数的映射;这些相同频率的数存放在list中;
                   3. 查找数据要O(1): freq对应的list可能很长,要直接定位:每个数据对应在list中的iter位置:又一个map
                                     (bear in mind: list是一个链表,并不支持random access)
             而实际上LFU中也用到了LRU的思想:
             Frequency相同的元素都在一个(freq-->list)的map中, 被映射的list是按照LRU的思想排列的;
             同一个freq的各个元素插入的位置和cache满了之后删除其中的元素的位置总是相反的-->就能保证删除least freq的元素
             总是删除和使用之后插入的元素相反的方向;
     1. freq[m[key]].second:  因为是某个元素的某个field所以是用. ; 如果是迭代器就是用->
     2. freq[m[key]].second.erase(iter[key]); : map和list中的erase()参数都是可以用int pos/iter pos,
     因为iter这个map记录的是迭代器的位置, 所以freq调用erase()的位置总是iter哈希表中对应的位置
     3. iter[key] = --freq[m[key].second].end(); //这样的freq取second是一个list,减减是因为end()取的是后一位迭代器
     4. put(key, val): 如果get(key)返回的是-1表示没有这个key,插入; 如果不是-1表示有这个key那么直接赋值
   🙅⚠️5.  if (freq[minFreq].size() == 0) ++minFreq; 这个是说freq的最小频率对应的list为空了,那么++minFreq;
      这里并不一定是一定是刚开始的状态才会minFreq对应的list为空: 如果是很早就达到了cache的上限那么最小频率的元素一个个被删除,
      如果刚好删除完了那么minFreq对应的list为空---> 此时在cache的数的频率都很大所以minFreq要增大; 所以minFreq=1并不是等价的
      6. iter.erase(freq[minFreq].front()); // map中erase方法传递迭代器参数; 不用管map的KV对, 直接删除迭代器位置对应的元素
         unordered_map/map虽然KV是无序的,但是还是有一定的顺序(迭代器遍历的那个顺序), 所以给iterPos能直接删除
      
  ***LRU:                                                             
   int cap;                                                         
   list<pair<int, int>> l;                                          
   unordered_map<int, list<pair<int,int>>::iterator> m;
  ***LFU:
   int cap, minFreq;
   unordered_map<int, pair<int, int>> m;  // key --> {value, freq}
   unordered_map<int, list<int>>   freq;  // #freq -->[ ]
   unordered_map<int, list<int>::iterator> iter; // key --> pos


   
   
   
   
