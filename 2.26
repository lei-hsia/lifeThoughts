今天是用到了 Linked List Cycle思想在array中进行index和num进行转化的题:

287. Find the Duplicate Number: 
    1. 二分查找: 为什么if(num <= mid): 可以直接比较num和mid ? 因为这个size为n+1的数组, 每个数字都是在1-n之间;
    2. Linked List Cycle快慢指针思想:因为每个数都在[1,n]之间,并且由于重复数字的存在===> 
        坐标和数字之间转换会相遇在entry point(环的入口); slow和fast找到环; 退出之后slow和t起点找到环的入口
        
442. Find all Duplicates in Array:
      关键: 建立映射和用flag标记: 
      e.g. [1,3,4,3,2]: i=1或者i=3: index=abs(nums[i])-1对应相同的index, 如果标记用取负号表示, 第一次映射到
      一个数就变为了负数，第二次再映射过去的时候就发现是负数了==> 这个num出现了两次
      实际上取负号、减1都是一种标记方式: int index=abs(nums[i])-1... push_back(index+1):
      其实是减了之后又加回去了
      ### 一开始是nums[i]赋值给index, 后来是nums[index]: 实际上是遍历由下标得到值, 再把值映射当下标获取新值
      ### 本质是这个数组对自己本身的映射

### XOR异或的用法:
268. Missing Number (Easy):
     0,1,...,n中选了n个元素在数组中,找到丢失的那个: 因为并不想牵扯数字排序: 一般会想到求和作差得到的就是那个少了的数字
                              隐患: sum可能overflow; 
     最佳答案的XOR方法: res=nums.size(); 一开始res是n, 和所有的下标 0~(n-1)异或,和所有出现的n个数异或,
     得到的结果就是所有出现过的数都和下标i异或掉了，剩下那个没有出现过的数

类似的题:
136. Single Number: 这个更直观, 数组中所有的数都出现了两次只有一个数出现了一次, 
      那么一异或出现两次的数都没有了, 只剩下只出现了一次的数
      ⚠️: 异或的性质: commutative: 异或是可以交换顺序的,所以对整个数组遍历异或是可以的 
     
137. Single Number II: (✨❤️: 其实这就是这种多数出现N次的通解了:取余改变N的大小就行了)
      Grandyang的方法是每一位都先加完, 然后对3取余剩下的就是没有出现3次的那个数的bitwise表示;
      一位一位地解决; 
