接着的greedy;
#############
Update 3.20. Task Scheduler: 用priority_queue记录每个任务出现的次数;
    pq的成员函数: empty,size, top, pop, push, emplace, swap; 
    push VS emplace: push是&,reference:改变之前的变量; emplace是create an updated copy
############

621. Task Scheduler:
    ⚠️其实有一点难理清思路: mx为同一个任务出现的最大次数:则 # block = (m-1);
                         n为interval:则(n+1)为每个block的长度;
       每个任务的数量建立一个array, sort这个array则最大任务数量对应的任务都排在最后面了,
       block算完之后最后一部分是最后剩下的最多数量任务的个数,i代表有最大任务数量任务sort之后最前的index,
       (25-i)表示有多少个这样的最大数量的任务的个数
       Total duration = (mx-1)*(n+1)+(25-i), 最后要和len=tasks.size()比较是因为如果tasks中的所有
       任务间隔n=0,ie.什么任务都可以相邻, 那么(mx-1)*(n+1)+(25-i)会少算, 此时的最短时间就是len
       
659. Split Array into Consecutive Subsequences: 难点在于, 不知道这里怎么用greedy的思路??
     因为仔细一想就发现,并不能直接加int创建一个最长的, 或者最短的subsequence; 但是如果不创建的话, 如何产生
     "一个顺子可以加上下一个数字"这种情况?  答案: 创建一个need的哈希表, 这个表专门记录一个顺子下一个数能是那一些数
     当给定的array中有某个数, 这个数并不能成为某个顺子的下一个数,而且这个数也不能开创一个顺子,那么就false
     ==> ⚠️: 遍历处理完成当前的数字num之后，从哈希表中移除这个数字
  ⚠️注意: greedy的两个应用: 
      1. 已有顺子的情况下，当前的数能成为顺子后面加的数，直接加，遍历到的数都是这样直接加
      2. 没有顺子的情况下，当前的数为起始点创建新的顺子，创建长度为最小可能值(3)的顺子
      
714. Best time to Buy and Sell stocks with a Transaction Fee:
     Grandyang: 这道题和122. Best... II最像, 但是那题没有交易费所以可以无脑greedy:
  122. Best ... II: 无脑贪婪,具体表现为总是求 nums[i]-nums[i-1]: 因为并没有限制同一天不同交易次数大于1,
      所以只要那一天先sell再buy就行了; 所以相邻元素做差就行了;
   714. 因为有transaction fee所以不能无脑卖, 不能直接做差加全部的利润: 所以必须要用dp处理(因为每天状态可变):
      sold[i]表示第i天卖出得到的利润(那么i-1天肯定有stock不然没东西卖), 
      hold[i]表示第i天买入, 利润是昨天卖出了，今天再买入，差值为利润
      最后返回的是全部股票卖出之后套现在手上的利润, i.e. sold.back()
      
763. Partition Labels: 关键是记录每一个字母最后的index; 当前的substring中一旦有这个字母:至少要到最后一个字母的index:
       1. map: 记录每个letter最后出现的index
       2. 遍历S, 当前substring的头尾分别用start, end记录
       3. 遍历当前字母，通过map获取这个字母最后出现的位置, end被更新为至少到这个位置
       4. 遍历的index==end说明到目前为止的所有字母都在当前substring中了: 找到一个断点
       
767. Reorganize String:
       1. 按字母顺序排序: 相邻字母相同就后面找到第一个不同的字母和这个字母交换; xxxla: 跪, 因为一排序x到后面去了
       2. 应该按字母出现的次数排序: 出现次数多的字母排在前面,这样交换后面的和前面很多的字母才能隔开前面的字母;
       3. 最大堆和最小堆在c++中都是pq实现的: 最大堆:树的父节点总是大于等于任何一个子节点的值, 最小堆相反
       4. pq直接push pair类型的元素, 排序首先是根据第一个元素的大小的, 第一个元素大的在前
       
 ##### 
 Task Scheduler && Reorganize String其实非常类似;
 Partition Labels 很好
 Split Array into Consecutive Sequences: 顺子, 用两个哈希表记录, 非常巧妙的思路
 
