back to LeetCode;

>> 在那之前: 
说来可笑，中国在自己国土上引渡罪犯成了自由世界的公敌，美国却可以用引渡法要求加拿大随意逮捕他国公民。
It is ridiculous that China has extradited criminals in its own territory as a public enemy 
of the free world, but the United States can use the extradition law to require Canada 
to randomly arrest other citizens.
>> 从中学到了什么?
>> 并没有觉得美国怎么怎么不好，反倒觉得，真是应验了我小时候尊敬的人, Otto von Bismarck在1867年的普鲁士说过的话;
   “当今世界，沟通谈判是没有用的，真正涉及到核心东西的时候，只能通过铁和血来解决”。铁血宰相告诉我们，实力才是王道。
   一切不好的情绪，敌视，轻蔑，伪善，虚伪等，在强大到压倒性的实力面前，都是徒劳的。 << 
   
===========================

1089. Duplicate Zeros: (3.32-3.38': can't solve; 4.30': all cleared);
      [two pass]
      肯定不能从前往后赋值，因为覆盖后面连续的所有的值; >> 从后往前赋值：但是要知道前面一个是不是0，
    1st pass: 数有多少个0，j计算全部的值，这样: 
    2nd pass: 从后往前遍历的时候已经知道了有多少个值要替换，--j已经往前走一位了，所以赋值条件是 --j<n
              不能相等; 而如果对应的i的index上面值是0，那么j的index前面也应该是0: --j一次再A[j]=0;
              
1090. Largest Values From Labels: (4.35-4.45': can't solve;
                                   4.55懂; 5.37': all cleared)
      >> 复习: map vs unordered_map: 一个的key是升序排列，一个的key是无序的;
              map vs multimap: 一个的key只能出现一次，另一个的key可以重复;
       
      >> Greedy解法: 
      1. 首先，肯定要sort，而如果sort了values之后labels就不能对应了, 那么首先要把values和labels对应起来:
      
      2. 考虑用multimap;
          为什么用multimap不用unordered_map? 因为需要从大到小取values的每个value，multimap直接排序好了；
               （其实看到这种一大堆相关对应的kv对，都要用map);
          为什么用multimap不用map? 因为每个value作为key，是可以有重复值的;
      multimap中的KV对，是value－label键值对，要用的是value，从大到小取，用迭代器遍历multimap的时候，
      从rbegin()到rend()的顺序取;(不用end()到begin(), 因为rbegin是从最后一位指针开始，end是最后一位后面一个)
      
      3. 因为同一个label下，每个value取的数量不能超过 use_limit, 而用map记录之后已经打乱了顺序，所以
         还要用另一个简单的unordered_map记录每个value用了多少次; 一旦达到了limit就不能取了;
     >>> 
      BUG:
         1. multimap 是不支持indexing的, unordered_map是支持indexing的;
         2. 用迭代器对map用rbegin()到rend()从后往前遍历, ++it是对的, --it是错的; 即使是从后往前

1091. Shortest Path in Binary Matrix:
      
